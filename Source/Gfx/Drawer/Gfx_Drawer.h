//==============================================================================
// Filename: Gfx_Drawer.h
// Description: 描画処理（親クラス）
// Copyright (C) 2022 Silicon Studio Co., Ltd. All rights reserved.
//==============================================================================

#pragma once

//===== インクルード部 =====
#include <Gfx/Gfx_Main.h>
#include <typeinfo>

#if DX_11

//===== 前方宣言 =====
class GfxBinder;
class GfxIndexBuffer;
class GfxVertexBuffer;

//===== クラス定義 =====

//***** ドロワー *****
class GfxDrawer
{
public:

    //コピーNG
    GfxDrawer(const GfxDrawer&) = delete;

    //--------------------------------------------------------------------------

    //--------------------------------------------------------------------------
    /// コンストラクタ
    ///
    /// \return void
    //--------------------------------------------------------------------------
    GfxDrawer() noexcept;

    //--------------------------------------------------------------------------
    /// デストラクタ
    ///
    /// \return void
    //--------------------------------------------------------------------------
    virtual ~GfxDrawer() noexcept;

    //--------------------------------------------------------------------------
    /// インデックス数取得
    ///
    /// \return インデックス数
    //--------------------------------------------------------------------------
    UINT GetIndexNum() const noexcept;

    //--------------------------------------------------------------------------
    /// 更新処理
    ///
    /// \return void
    //--------------------------------------------------------------------------
    virtual void Update() noexcept = 0;

    //--------------------------------------------------------------------------
    /// 描画処理
    ///
    /// \param[in] gfx              グラフィック処理の参照先
    /// \param[in] bDrawInstance    インスタンシング描画するかどうか
    ///
    /// \return void
    //--------------------------------------------------------------------------
    virtual void Draw(
        /*[in]*/ GfxMain& gfx,
        /*[in]*/ bool bDrawInstance = false) const noexcept(!IS_DEBUG);

    //--------------------------------------------------------------------------
    /// 変形行列取得
    ///
    /// \param[in] instanceIndex    インスタンス番号
    ///
    /// \return 変形行列(4x4)
    //--------------------------------------------------------------------------
    virtual DirectX::XMFLOAT4X4 GetTransformMtx(
        /*[in]*/ int instanceIndex = 0) const noexcept = 0;

    //--------------------------------------------------------------------------
    /// ポリゴン数取得
    ///
    /// \return ポリゴン数
    //--------------------------------------------------------------------------
    virtual UINT GetPolygonNum() const noexcept = 0;

    //--------------------------------------------------------------------------
    /// インスタンス追加
    ///
    /// \return 追加されたインスタンスの番号
    //--------------------------------------------------------------------------
    virtual int AddInstance()
    {
        throw ERROR_EX2(S_OK, "子クラスでインスタンス化行ってください。");
    }

    //--------------------------------------------------------------------------
    /// インスタンスクリア
    ///
    /// \return void
    //--------------------------------------------------------------------------
    virtual void ClearInstance()
    {
        throw ERROR_EX2(S_OK, "子クラスでインスタンスをクリアしてください。");
    }

    //--------------------------------------------------------------------------

protected:

    //--------------------------------------------------------------------------

    //--------------------------------------------------------------------------
    /// バインダ登録
    ///
    /// \param[in] pBinder  登録先バインダのポインタ
    ///
    /// \return void
    //--------------------------------------------------------------------------
    void AddBind(
        /*[in]*/ std::unique_ptr<GfxBinder> pBinder);

    //--------------------------------------------------------------------------
    /// インスタンス数設定
    ///
    /// \param[in] num  インスタンス数
    ///
    /// \return void
    //--------------------------------------------------------------------------
    void SetInstanceNum(
        /*[in]*/ int num)
    {
        if (num < 0)
            throw ERROR_EX2(S_OK, "インスタンス数は1以上でなければならない。");
        m_instanceNum = num;
    }

    //--------------------------------------------------------------------------
    /// 頂点バッファ参照
    ///
    /// \return 頂点バッファの参照先
    //--------------------------------------------------------------------------
    GfxVertexBuffer& GetVertexBuffer() const        //頂点バッファ参照
    {
        return *m_pVertexBuffer;
    }

    //--------------------------------------------------------------------------
    /// 静的バインダ配列参照
    ///
    /// \return 静的バインダ配列の参照先
    //--------------------------------------------------------------------------
    virtual const std::vector<std::unique_ptr<GfxBinder>>& GetStaticBind() const noexcept = 0;

    //--------------------------------------------------------------------------
    /// 静的インデックスバッファ参照
    ///
    /// \return 静的インデックスバッファの参照先
    //--------------------------------------------------------------------------
    virtual const GfxIndexBuffer& GetStaticIndexBuffer() const noexcept = 0;

    //--------------------------------------------------------------------------

private:

    //--------------------------------------------------------------------------
    std::vector<std::unique_ptr<GfxBinder>> m_aBinder;
    const GfxIndexBuffer* m_pIndexBuffer;
    int m_instanceNum;
    GfxVertexBuffer* m_pVertexBuffer;
    //--------------------------------------------------------------------------

    /// <summary>
    /// m_aBinder           バインダのポインタ配列数
    /// m_pIndexBuffer      インデックスバッファのポインタ（所有権なし）
    /// m_instanceNum       インスタンス数
    /// m_pVertexBuffer     頂点バッファのポインタ（インスタンス更新用）
    /// </summary>
};

#elif DX_12


#endif // GFX
