//==============================================================================
// Filename: Tool_Mouse.h
// Description: マウス受付処理
// Copyright (C) 2022 Silicon Studio Co., Ltd. All rights reserved.
//==============================================================================

#pragma once

//===== インクルード部 =====
#include <Win/Win_DirectX.h>
#include <Gfx/Gfx_Main.h>

//===== 定数・マクロ定義 =====
constexpr int MOUSE_L = static_cast<int>(VK_LBUTTON);       //マウスの左ボタン
constexpr int MOUSE_R = static_cast<int>(VK_RBUTTON);       //マウスの右ボタン
constexpr int MOUSE_M = static_cast<int>(VK_MBUTTON);       //マウスの中央ボタン
constexpr int MOUSE_X1 = static_cast<int>(VK_XBUTTON1);     //マウスの第1拡張ボタン
constexpr int MOUSE_X2 = static_cast<int>(VK_XBUTTON2);     //マウスの第2拡張ボタン

//===== 前方宣言 =====
class App64;
class WinMouse;
class ToolKeyboard;

//===== クラス定義 =====

//***** マウス入力 *****
class ToolMouse
{
    //--------------------------------------------------------------------------
    friend class ToolInputMgr;
    //--------------------------------------------------------------------------

public:

    //--------------------------------------------------------------------------

    //--------------------------------------------------------------------------
    /// コンストラクタ
    ///
    /// \param[in] app  App参照
    /// \param[in] kb   キーボード参照
    ///
    /// \return void
    //--------------------------------------------------------------------------
    ToolMouse(
        /*[in]*/ App64& app,
        /*[in]*/ ToolKeyboard& kb) noexcept;

    //--------------------------------------------------------------------------
    /// デストラクタ
    ///
    /// \return void
    //--------------------------------------------------------------------------
    ~ToolMouse() noexcept;

    //--------------------------------------------------------------------------
    /// プレス判定
    ///
    /// \param[in] nBtn  判定したいキーの値
    ///
    /// \return bool型変数(プレスしたかどうか)
    //--------------------------------------------------------------------------
    bool GetPress(
        /*[in]*/ int nBtn) const noexcept;

    //--------------------------------------------------------------------------
    /// トリガー判定
    ///
    /// \param[in] nBtn  判定したいキーの値
    ///
    /// \return bool型変数(トリガーしたかどうか)
    //--------------------------------------------------------------------------
    bool GetTrigger(
        /*[in]*/ int nBtn) const noexcept;

    //--------------------------------------------------------------------------
    /// リリース判定
    ///
    /// \param[in] nBtn  判定したいキーの値
    ///
    /// \return bool型変数(リリースしたかどうか)
    //--------------------------------------------------------------------------
    bool GetRelease(
        /*[in]*/ int nBtn) const noexcept;

    //--------------------------------------------------------------------------
    /// リピート判定（デフォルト0.5秒）
    ///
    /// \param[in] nBtn         判定したいキーの値
    /// \param[in] fInterval    判定する間隔
    ///
    /// \return bool型変数(リピートしたかどうか)
    //--------------------------------------------------------------------------
    bool GetRepeat(
        /*[in]*/ int nBtn,
        /*[in]*/ float fInterval = 0.5f);

    //--------------------------------------------------------------------------
    /// 座標取得
    ///
    /// \return マウスの座標
    //--------------------------------------------------------------------------
    DirectX::XMFLOAT2 GetPos() const noexcept;

    //--------------------------------------------------------------------------
    /// ホイール値取得
    ///
    /// \return ホイール値
    //--------------------------------------------------------------------------
    int GetWheelVal() const noexcept;

    //--------------------------------------------------------------------------
    /// 移動量取得
    ///
    /// \return マウスの移動量
    //--------------------------------------------------------------------------
    DirectX::XMINT2 GetMoveVal() const noexcept;

    //--------------------------------------------------------------------------

private:

    //--------------------------------------------------------------------------

    //--------------------------------------------------------------------------
    /// 更新処理
    ///
    /// \return void
    //--------------------------------------------------------------------------
    void Update() noexcept;

    //--------------------------------------------------------------------------

    //--------------------------------------------------------------------------
    WinMouse& m_mouse;
    ToolKeyboard& m_kb;
    DirectX::XMINT2 moveVal;
    //--------------------------------------------------------------------------

    /// <summary>
    /// m_mouse     マウス参照
    /// m_kb        キーボード参照
    /// moveVal     移動量（毎フレーム）
    /// </summary>
};
