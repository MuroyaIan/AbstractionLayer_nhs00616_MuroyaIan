//==============================================================================
// Filename: Win_Mouse.h
// Description: ウィンドウ処理
// Copyright (C) 2022 Silicon Studio Co., Ltd. All rights reserved.
//==============================================================================

#pragma once

//===== インクルード部 =====
#include <queue>                //FIFOコンテナ

//===== 構造体定義 =====
struct WinMouseInfo             //マウス情報
{
    //--------------------------------------------------------------------------

    //--------------------------------------------------------------------------
    /// コンストラクタ
    ///
    /// \return void
    //--------------------------------------------------------------------------
    WinMouseInfo() noexcept :
        bLeftIsPressed(false), bRightIsPressed(false),
        nPosX(0), nPosY(0), bIsInWindow(false)
    {}

    //--------------------------------------------------------------------------
    /// コンストラクタ
    ///
    /// \param[in] Parent   マウス情報のコピー先
    ///
    /// \return void
    //--------------------------------------------------------------------------
    WinMouseInfo(
        /*[in]*/ const WinMouseInfo& parent) noexcept :
        bLeftIsPressed(parent.bLeftIsPressed),
        bRightIsPressed(parent.bRightIsPressed),
        nPosX(parent.nPosX), nPosY(parent.nPosY),
        bIsInWindow(parent.bIsInWindow)
    {}

    //--------------------------------------------------------------------------
    /// デストラクタ
    ///
    /// \return void
    //--------------------------------------------------------------------------
    ~WinMouseInfo() noexcept {}

    //--------------------------------------------------------------------------

    //--------------------------------------------------------------------------
    bool bLeftIsPressed;
    bool bRightIsPressed;
    int nPosX;
    int nPosY;
    bool bIsInWindow;
    //--------------------------------------------------------------------------

    /// <summary>
    /// bLeftIsPressed      左クリック
    /// bRightIsPressed     右クリック
    /// nPosX               マウス座標
    /// nPosY               マウス座標
    /// bIsInWindow         ウィンドウ内にいる
    /// </summary>
};

//===== クラス定義 =====

//***** マウス状態 ****
enum class WinMouseStatus
{
    L_Press,
    L_Release,
    R_Press,
    R_Release,
    WheelUp,
    WheelDown,
    Move,
    EnterWindow,
    LeaveWindow,
    Invalid
};

//***** マウスイベント ****
class WinMouseEvents
{
public:

    //--------------------------------------------------------------------------

    //--------------------------------------------------------------------------
    /// コンストラクタ
    ///
    /// \return void
    //--------------------------------------------------------------------------
    WinMouseEvents() noexcept;

    //--------------------------------------------------------------------------
    /// コンストラクタ
    ///
    /// \param[in] Type     マウス状態のコピー先
    /// \param[in] Parent   マウス情報のコピー先
    ///
    /// \return void
    //--------------------------------------------------------------------------
    WinMouseEvents(
        /*[in]*/ WinMouseStatus type,
        /*[in]*/ const WinMouseInfo& parent) noexcept;

    //--------------------------------------------------------------------------
    /// デストラクタ
    ///
    /// \return void
    //--------------------------------------------------------------------------
    ~WinMouseEvents() noexcept;

    //--------------------------------------------------------------------------
    /// マウスイベント有効確認
    ///
    /// \return bool型変数(マウスイベント有効かどうか)
    //--------------------------------------------------------------------------
    bool IsValid() const noexcept
    {
        return (m_type != WinMouseStatus::Invalid) ? true : false;
    }

    //--------------------------------------------------------------------------
    /// マウス状態取得
    ///
    /// \return マウス状態を表す変数
    //--------------------------------------------------------------------------
    WinMouseStatus GetType() const noexcept
    {
        return m_type;
    }

    //--------------------------------------------------------------------------
    /// マウスXY座標取得
    ///
    /// \return マウスのXY座標(int, int)
    //--------------------------------------------------------------------------
    std::pair<int, int> GetPos() const noexcept
    {
        return{ m_info.nPosX, m_info.nPosY };
    }

    //--------------------------------------------------------------------------
    /// マウスX座標取得
    ///
    /// \return マウスのX座標(int)
    //--------------------------------------------------------------------------
    int GetPosX() const noexcept
    {
        return m_info.nPosX;
    }

    //--------------------------------------------------------------------------
    /// マウスY座標取得
    ///
    /// \return マウスのY座標(int)
    //--------------------------------------------------------------------------
    int GetPosY() const noexcept
    {
        return m_info.nPosY;
    }

    //--------------------------------------------------------------------------
    /// ウィンドウ内にいるか確認
    ///
    /// \return bool型変数
    //--------------------------------------------------------------------------
    bool IsInWindow() const noexcept
    {
        return m_info.bIsInWindow;
    }

    //--------------------------------------------------------------------------
    /// マウス左クリック確認
    ///
    /// \return bool型変数(クリックしたかどうか)
    //--------------------------------------------------------------------------
    bool LeftIsPressed() const noexcept
    {
        return m_info.bLeftIsPressed;
    }

    //--------------------------------------------------------------------------
    /// マウス右クリック確認
    ///
    /// \return bool型変数(クリックしたかどうか)
    //--------------------------------------------------------------------------
    bool RightIsPressed() const noexcept
    {
        return m_info.bRightIsPressed;
    }

    //--------------------------------------------------------------------------

private:

    //--------------------------------------------------------------------------
    WinMouseStatus m_type;
    WinMouseInfo m_info;
    //--------------------------------------------------------------------------

    /// <summary>
    /// m_type  マウスの状態
    /// m_info  マウス情報
    /// </summary>
};

//***** マウス処理 *****
class WinMouse
{
    //--------------------------------------------------------------------------
    friend class WinDirectX;
    //--------------------------------------------------------------------------

public:

    //RawInput用構造体（マウス変化量）
    struct RawDelta
    {
        //----------------------------------------------------------------------

        //----------------------------------------------------------------------
        /// コンストラクタ
        ///
        /// \return void
        //----------------------------------------------------------------------
        RawDelta() noexcept : x(0), y(0)
        {}

        //----------------------------------------------------------------------
        /// コンストラクタ
        ///
        /// \param[in] xIn   マウスの移動量(x軸)
        /// \param[in] yIn   マウスの移動量(y軸)
        ///
        /// \return void
        //----------------------------------------------------------------------
        RawDelta(
            /*[in]*/ int xIn,
            /*[in]*/ int yIn) noexcept :
            x(xIn), y(yIn)
        {}

        //----------------------------------------------------------------------
        /// デストラクタ
        ///
        /// \return void
        //----------------------------------------------------------------------
        ~RawDelta() noexcept
        {}
        //----------------------------------------------------------------------

        //----------------------------------------------------------------------
        int x;
        int y;
        //----------------------------------------------------------------------

        /// <summary>
        /// x   マウスの移動量(x軸)
        /// y   マウスの移動量(y軸)
        /// </summary>
    };

    //--------------------------------------------------------------------------

    //--------------------------------------------------------------------------
    /// コンストラクタ
    ///
    /// \return void
    //--------------------------------------------------------------------------
    WinMouse() noexcept;

    //--------------------------------------------------------------------------
    /// デストラクタ
    ///
    /// \return void
    //--------------------------------------------------------------------------
    ~WinMouse() noexcept;

    //--------------------------------------------------------------------------
    /// マウスXY座標取得
    ///
    /// \return マウスのXY座標(int, int)
    //--------------------------------------------------------------------------
    std::pair<int, int> GetPos() const noexcept;

    //--------------------------------------------------------------------------
    /// マウスX座標取得
    ///
    /// \return マウスのX座標(int)
    //--------------------------------------------------------------------------
    int GetPosX() const noexcept;

    //--------------------------------------------------------------------------
    /// マウスY座標取得
    ///
    /// \return マウスのY座標(int)
    //--------------------------------------------------------------------------
    int GetPosY() const noexcept;

    //--------------------------------------------------------------------------
    /// ホイール値取得
    ///
    /// \return ホイール値
    //--------------------------------------------------------------------------
    int GetWheelVal() const noexcept;

    //--------------------------------------------------------------------------
    /// ウィンドウ内にいるか確認
    ///
    /// \return bool型変数
    //--------------------------------------------------------------------------
    bool IsInWindow() const noexcept;

    //--------------------------------------------------------------------------
    /// マウス左クリック確認
    ///
    /// \return bool型変数(クリックしたかどうか)
    //--------------------------------------------------------------------------
    bool LeftIsPressed() const noexcept;

    //--------------------------------------------------------------------------
    /// マウス右クリック確認
    ///
    /// \return bool型変数(クリックしたかどうか)
    //--------------------------------------------------------------------------
    bool RightIsPressed() const noexcept;

    //--------------------------------------------------------------------------
    /// バッファ読込み
    ///
    /// \return 格納されたバッファ情報
    //--------------------------------------------------------------------------
    WinMouseEvents ReadBuffer() noexcept;

    //--------------------------------------------------------------------------
    /// バッファの空き確認
    ///
    /// \return bool型変数(バッファが空いてるかどうか)
    //--------------------------------------------------------------------------
    bool IsEmpty() const noexcept;

    //--------------------------------------------------------------------------
    /// バッファのクリア
    ///
    /// \return void
    //--------------------------------------------------------------------------
    void ClearBuffer() noexcept;

    //--------------------------------------------------------------------------
    /// RawInputバッファ読込み
    ///
    /// \return マウス変化量を表す構造体
    //--------------------------------------------------------------------------
    RawDelta ReadRawDelta() noexcept;

    //--------------------------------------------------------------------------
    /// RawInput使用制御
    ///
    /// \param[in] bUse     RawInputを使用するかどうか設定するフラグ
    ///
    /// \return void
    //--------------------------------------------------------------------------
    void SetRawInput(
        /*[in]*/ bool bUse) noexcept;

    //--------------------------------------------------------------------------
    /// RawInput使用状態確認
    ///
    /// \return bool型変数(RawInputが使用中かどうか)
    //--------------------------------------------------------------------------
    bool IsUsingRawInput() const noexcept;

    //--------------------------------------------------------------------------

private:

    //--------------------------------------------------------------------------

    //--------------------------------------------------------------------------
    /// バッファ切り捨て
    ///
    /// \return void
    //--------------------------------------------------------------------------
    void TruncateBuffer() noexcept;

    //--------------------------------------------------------------------------
    /// マウスが移動した
    ///
    /// \param[in] posX     マウスの移動先位置(x軸)
    /// \param[in] posY     マウスの移動先位置(y軸)
    ///
    /// \return void
    //--------------------------------------------------------------------------
    void MouseMove(
        /*[in]*/ int posX,
        /*[in]*/ int posY) noexcept;

    //--------------------------------------------------------------------------
    /// マウスがウィンドウ外に行った
    ///
    /// \return void
    //--------------------------------------------------------------------------
    void LeaveWindow() noexcept;

    //--------------------------------------------------------------------------
    /// マウスがウィンドウ内に入った
    ///
    /// \return void
    //--------------------------------------------------------------------------
    void Enterwindow() noexcept;

    //--------------------------------------------------------------------------
    /// マウスが左クリックした
    ///
    /// \return void
    //--------------------------------------------------------------------------
    void LeftPressed() noexcept;

    //--------------------------------------------------------------------------
    /// マウスが左クリックをやめた
    ///
    /// \return void
    //--------------------------------------------------------------------------
    void LeftReleased() noexcept;

    //--------------------------------------------------------------------------
    /// マウスが右クリックした
    ///
    /// \return void
    //--------------------------------------------------------------------------
    void RightPressed() noexcept;

    //--------------------------------------------------------------------------
    /// マウスが右クリックをやめた
    ///
    /// \return void
    //--------------------------------------------------------------------------
    void RightReleased() noexcept;

    //--------------------------------------------------------------------------
    /// ホイールアップ
    ///
    /// \return void
    //--------------------------------------------------------------------------
    void WheelUp() noexcept;

    //--------------------------------------------------------------------------
    /// ホイールダウン
    ///
    /// \return void
    //--------------------------------------------------------------------------
    void WheelDown() noexcept;

    //--------------------------------------------------------------------------
    /// ホイール処理
    ///
    /// \param[in] nDelta   ホイールの変化量を表す変数
    ///
    /// \return void
    //--------------------------------------------------------------------------
    void WheelProc(
        /*[in]*/ int nDelta) noexcept;

    //--------------------------------------------------------------------------
    /// RawInput バッファ切り捨て
    ///
    /// \return void
    //--------------------------------------------------------------------------
    void TruncateRawInputBuffer() noexcept;

    //--------------------------------------------------------------------------
    /// RawInput 情報取得
    ///
    /// \param[in] dx   マウスの移動量(x軸)
    /// \param[in] dy   マウスの移動量(y軸)
    ///
    /// \return void
    //--------------------------------------------------------------------------
    void GetRawDelta(
        /*[in]*/ int dx,
        /*[in]*/ int dy) noexcept;

    //--------------------------------------------------------------------------

    //--------------------------------------------------------------------------
    static constexpr unsigned int m_nBufferSize = 16u;
    std::queue<WinMouseEvents> m_buffer;
    WinMouseInfo m_info;
    int m_wheelDelta;
    int m_wheelVal;
    std::queue<RawDelta> m_rawDeltaBuffer;
    bool m_bUseRawInput;
    //--------------------------------------------------------------------------

    /// <summary>
    /// m_nBufferSize         キューのサイズ（フレームごとの最大受付数）
    /// m_buffer            マウスイベント用キュー
    /// m_info              マウス情報
    /// m_wheelDelta        ホイール操作量
    /// m_wheelVal          ホイール値
    /// m_rawDeltaBuffer    RawInput用キュー
    /// m_bUseRawInput      RawInput使用フラグ
    /// </summary>
};
